{"version":3,"sources":["Components/NewTaskForm.jsx","Components/Timer.jsx","Components/service-context.js","Components/Task.jsx","Components/TaskList.jsx","Components/TaskFilter.jsx","Components/Footer.jsx","Components/App.jsx","index.js"],"names":["NewTaskForm","props","newTask","handleNewTaskChang","handleNewTask","onSubmit","className","onChange","value","placeholder","required","Timer","timeResult","onStartTimer","onStopTimer","type","onClick","aria-label","seconds","sec","min","Math","floor","hours","transformMsToTime","TaskContext","React","createContext","FooterContex","EditInput","id","title","task","editValue","editMode","setEditValue","onSaveEditing","setEditMode","event","preventDefault","name","target","onBlur","currentTarget","Task","useContext","removeTask","completeTask","updateTimer","useState","timer","setSeconds","isActive","setIsActive","message","timerID","useRef","useEffect","clearTimeout","current","setTimeout","isCompleted","classNames","state","checked","formatDistanceToNow","created","includeSeconds","TaskList","tasks","filter","todoList","filterState","filteredTodos","length","map","key","filters","TaskFilter","onFilterStateRename","onFilterSelection","el","filterName","data-test","renderFilterButtons","Footer","countItems","onClearCompleted","App","setNewTask","setTodoList","setFilterState","uniqueId","Date","now","Provider","index","findIndex","oldTask","updatedTask","newList","slice","oldTodo","newTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.075edb32.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewTaskForm = (props) => {\n  const { newTask, handleNewTaskChang, handleNewTask } = props;\n\n  return (\n    <form onSubmit={handleNewTask}>\n      <input\n        className=\"new-todo\"\n        onChange={handleNewTaskChang}\n        value={newTask}\n        placeholder=\"What needs to be done?\"\n        required\n      />\n    </form>\n  );\n};\n\nNewTaskForm.propTypes = {\n  newTask: PropTypes.string.isRequired,\n  handleNewTask: PropTypes.func.isRequired,\n  handleNewTaskChang: PropTypes.func.isRequired,\n};\n\nexport default NewTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Timer = (props) => {\n  const transformMsToTime = (seconds) => {\n    let sec = seconds;\n    let min = Math.floor(seconds / 60);\n    let hours = Math.floor(seconds / 60 / 60);\n    sec = sec < 10 ? `0${sec}` : sec;\n    min = min < 10 ? `0${min}` : min;\n\n    if (seconds >= 3600) {\n      hours = hours < 10 ? `0${hours}` : hours;\n      return `${hours}:${min}:${sec}`;\n    }\n    return `${min}:${sec}`;\n  };\n\n  const { timeResult, onStartTimer, onStopTimer } = props;\n\n  return (\n    <span className=\"description\">\n      <button type=\"button\" className=\"icon icon-play\" onClick={onStartTimer} aria-label=\"Start timer\" />\n      <button type=\"button\" className=\"icon icon-pause\" onClick={onStopTimer} aria-label=\"Stop timer\" />\n      {transformMsToTime(timeResult)}\n    </span>\n  );\n};\n\nTimer.propTypes = {\n  timeResult: PropTypes.number.isRequired,\n  onStartTimer: PropTypes.func.isRequired,\n  onStopTimer: PropTypes.func.isRequired,\n};\n\nexport default Timer;\n","import React from 'react';\n\nconst TaskContext = React.createContext();\nconst FooterContex = React.createContext();\n\nexport { TaskContext, FooterContex };\n","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nimport Timer from './Timer';\n\nimport { TaskContext } from './service-context';\n\nconst Task = (props) => {\n  const { task } = props;\n  const { removeTask, completeTask, updateTimer, onSaveEditing } = useContext(TaskContext);\n\n  const [seconds, setSeconds] = useState(task.timer);\n  const [isActive, setIsActive] = useState(false);\n\n  const [editMode, setEditMode] = useState(false);\n  const [editValue, setEditValue] = useState(task.message);\n\n  const timerID = useRef(null);\n\n  const onStartTimer = () => {\n    clearTimeout(timerID.current);\n    setIsActive(true);\n  };\n\n  const onStopTimer = () => {\n    clearTimeout(timerID.current);\n    setIsActive(false);\n  };\n\n  useEffect(() => {\n    if (isActive) {\n      clearTimeout(timerID.current);\n      timerID.current = setTimeout(() => {\n        setSeconds((sec) => sec + 1);\n      }, 1000);\n    } else if (!isActive) {\n      clearTimeout(timerID.current);\n    }\n\n    if (task.isCompleted) {\n      clearTimeout(timerID.current);\n      setIsActive(false);\n    }\n\n    updateTimer(task.id, seconds);\n\n    return () => clearTimeout(timerID.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isActive, seconds, task.isCompleted, task.id]);\n\n  let classNames = 'completed';\n\n  if (task.state === 'active') {\n    classNames = '';\n  }\n\n  if (editMode) {\n    classNames = 'editing';\n  }\n\n  return (\n    <li className={classNames}>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" name={task.id} checked={task.isCompleted} onChange={completeTask} />\n        <label>\n          <span className=\"title\">{task.message}</span>\n          <Timer timeResult={seconds} onStartTimer={onStartTimer} onStopTimer={onStopTimer} />\n          <span className=\"description\">\n            created&nbsp;\n            {formatDistanceToNow(task.created, { includeSeconds: true })}\n            &nbsp;ago\n          </span>\n        </label>\n        <button\n          type=\"button\"\n          className=\"icon icon-edit\"\n          name={task.id}\n          onClick={() => setEditMode(!editMode)}\n          aria-label=\"Edite task\"\n        />\n        <button\n          type=\"button\"\n          className=\"icon icon-destroy\"\n          onClick={() => removeTask(task.id)}\n          aria-label=\"Delete task\"\n        />\n      </div>\n      {editMode && (\n        <EditInput\n          task={task}\n          editValue={editValue}\n          editMode={editMode}\n          setEditValue={setEditValue}\n          setEditMode={setEditMode}\n          onSaveEditing={onSaveEditing}\n        />\n      )}\n    </li>\n  );\n};\n\nconst EditInput = (props) => {\n  const { task, editValue, editMode, setEditValue, onSaveEditing, setEditMode } = props;\n\n  const onChangeEditValue = (event) => {\n    event.preventDefault();\n    setEditValue(event.target.value);\n  };\n\n  const onSaveEditTaskInBlur = (event) => {\n    event.preventDefault();\n    const title = event.currentTarget.value;\n    const id = event.currentTarget.name;\n    onSaveEditing(id, title);\n    setEditMode(!editMode);\n  };\n\n  const onSubmitEditTask = (id, title) => (event) => {\n    event.preventDefault();\n    onSaveEditing(id, title);\n    setEditMode(!editMode);\n  };\n\n  return (\n    <form onSubmit={onSubmitEditTask(task.id, editValue)}>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        name={task.id}\n        value={editValue}\n        onChange={onChangeEditValue}\n        onBlur={onSaveEditTaskInBlur}\n      />\n    </form>\n  );\n};\n\nTask.propTypes = {\n  task: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n};\nEditInput.propTypes = {\n  task: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  editValue: PropTypes.string.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  setEditValue: PropTypes.func.isRequired,\n  onSaveEditing: PropTypes.func.isRequired,\n  setEditMode: PropTypes.func.isRequired,\n};\n\nexport default Task;\n","import React, { useContext } from 'react';\n\nimport Task from './Task';\n\nimport { TaskContext } from './service-context';\n\nconst TaskList = () => {\n  const { todoList, filterState } = useContext(TaskContext);\n\n  const onFilterTodos = (tasks, filter) => {\n    const newTodoList = filter === 'all' ? tasks : tasks.filter((task) => task.state === filter);\n    return newTodoList;\n  };\n\n  const filteredTodos = onFilterTodos(todoList, filterState);\n\n  return (\n    <ul className=\"todo-list\">\n      {filteredTodos.length > 0 && filteredTodos.map((task) => <Task task={task} key={task.id} />)}\n    </ul>\n  );\n};\n\nexport default TaskList;\n","import React, { useContext } from 'react';\n\nimport { FooterContex } from './service-context';\n\nconst filters = [\n  ['all', 'All'],\n  ['active', 'Active'],\n  ['finished', 'Completed'],\n];\n\nconst TaskFilter = () => {\n  const { filterState, onFilterStateRename } = useContext(FooterContex);\n\n  const onFilterSelection = (event) => {\n    event.preventDefault();\n    onFilterStateRename(event.target.name);\n  };\n\n  const renderFilterButtons = ([filterName, name], filter) => {\n    const classNames = filterName === filter ? 'selected' : '';\n\n    return (\n      <li key={filterName}>\n        <button\n          type=\"button\"\n          className={classNames}\n          name={filterName}\n          data-test={`task-filter-${filterName}`}\n          onClick={onFilterSelection}\n        >\n          {name}\n        </button>\n      </li>\n    );\n  };\n\n  return <ul className=\"filters\">{filters.map((el) => renderFilterButtons(el, filterState))}</ul>;\n};\n\nexport default TaskFilter;\n","import React, { useContext } from 'react';\n\nimport TaskFilter from './TaskFilter';\n\nimport { FooterContex } from './service-context';\n\nconst Footer = () => {\n  const { countItems, onClearCompleted } = useContext(FooterContex);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{countItems} items left</span>\n      <TaskFilter />\n      <button type=\"button\" className=\"clear-completed\" onClick={onClearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport uniqueId from 'lodash/uniqueId';\n\nimport NewTaskForm from './NewTaskForm';\nimport TaskList from './TaskList';\nimport Footer from './Footer';\n\nimport { TaskContext, FooterContex } from './service-context';\n\nexport default function App() {\n  const [newTask, setNewTask] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  const [filterState, setFilterState] = useState('all');\n\n  // Работа с NewTaskForm - start\n  const handleNewTaskChang = (event) => {\n    event.preventDefault();\n    setNewTask(event.target.value);\n  };\n\n  const handleNewTask = (event) => {\n    event.preventDefault();\n    if (newTask === '') return;\n    setTodoList([\n      {\n        id: uniqueId(),\n        message: newTask,\n        state: 'active',\n        isCompleted: false,\n        created: Date.now(),\n        timer: 0,\n      },\n      ...todoList,\n    ]);\n    setNewTask('');\n  };\n  // Работа с NewTaskForm - end\n\n  // Удаление задачи\n  const removeTask = (id) => {\n    setTodoList(todoList.filter((task) => task.id !== id));\n  };\n\n  // Выполнение задачи\n  const completeTask = (event) => {\n    const { name } = event.target;\n    const index = todoList.findIndex((task) => task.id === name);\n    const oldTask = todoList[index];\n    const updatedTask = {\n      ...oldTask,\n      isCompleted: !oldTask.isCompleted,\n      state: oldTask.state === 'active' ? 'finished' : 'active',\n    };\n    const newList = [...todoList.slice(0, index), updatedTask, ...todoList.slice(index + 1)];\n    setTodoList(newList);\n  };\n\n  // For Footer & TaskFilter\n  const countItems = todoList.filter((task) => task.state === 'active').length;\n\n  const onClearCompleted = () => {\n    const newList = todoList.filter((task) => task.state === 'active');\n    setTodoList(newList);\n  };\n\n  const onFilterStateRename = (name) => {\n    setFilterState(name);\n  };\n\n  // Timer\n  const updateTimer = (id, timeResult) => {\n    const index = todoList.findIndex((task) => task.id === id);\n    const oldTodo = todoList[index];\n    const newTodo = {\n      ...oldTodo,\n      timer: timeResult,\n    };\n    const newList = [...todoList.slice(0, index), newTodo, ...todoList.slice(index + 1)];\n    setTodoList(newList);\n  };\n\n  // Save Editing\n  const onSaveEditing = (id, title) => {\n    const index = todoList.findIndex((task) => task.id === id);\n    const oldTodo = todoList[index];\n    const newTodo = {\n      ...oldTodo,\n      message: title,\n    };\n    const newList = [...todoList.slice(0, index), newTodo, ...todoList.slice(index + 1)];\n    setTodoList(newList);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTaskForm handleNewTaskChang={handleNewTaskChang} handleNewTask={handleNewTask} newTask={newTask} />\n      </header>\n      <section className=\"main\">\n        <TaskContext.Provider value={{ todoList, removeTask, completeTask, filterState, updateTimer, onSaveEditing }}>\n          <TaskList />\n        </TaskContext.Provider>\n        <FooterContex.Provider value={{ countItems, onClearCompleted, onFilterStateRename, filterState }}>\n          <Footer />\n        </FooterContex.Provider>\n      </section>\n    </section>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Components/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}